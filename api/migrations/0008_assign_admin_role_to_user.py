# Generated by Django 5.2.7 on 2025-10-02 16:24

from django.db import migrations

def assign_admin_role(apps, schema_editor):
    """
    Assigns the '2Seasons' user to the 'Admin' group.
    """
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')

    try:
        user = User.objects.get(username='2Seasons')
        admin_group, _ = Group.objects.get_or_create(name='Admin')
        user.groups.add(admin_group)
    except User.DoesNotExist:
        # If the user doesn't exist, we can't assign the role.
        # This is fine, as it might not exist in all environments (e.g., testing).
        pass

def remove_admin_role(apps, schema_editor):
    """
    Removes the '2Seasons' user from the 'Admin' group (for reversing the migration).
    """
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')

    try:
        user = User.objects.get(username='2Seasons')
        admin_group = Group.objects.get(name='Admin')
        user.groups.remove(admin_group)
    except (User.DoesNotExist, Group.DoesNotExist):
        pass

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0007_alter_equipment_equipment_type_appointment_and_more'),
    ]

    operations = [
        migrations.RunPython(assign_admin_role, remove_admin_role),
    ]